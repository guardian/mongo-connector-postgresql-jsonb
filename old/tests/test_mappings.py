# -*- coding: utf-8 -*-

from unittest import TestCase, main

from mongo_connector.doc_managers import mappings


class TestPostgreSQLMappings(TestCase):
    def test_clean_and_flatten_doc(self):
        mapping = {
            'db': {
                'col': {
                    'a': {'type': 'INT'},
                    'b.c.d': {'type': 'INT'},
                    'e': {'type': '_ARRAY_OF_SCALARS'},
                    'e.0': {'type': 'INT'},
                    'e.1': {'type': 'INT'},
                    'e.2': {'type': 'INT'}
                }
            }
        }
        doc = {
            'a': 2,
            'b': {
                'c': {
                    'd': 5
                }
            },
            'e': [6, 7, 8]
        }
        expected = {
            'a': 2,
            'b.c.d': 5,
            'e.0': 6,
            'e.1': 7,
            'e.2': 8
        }
        got = mappings._clean_and_flatten_doc(mapping, doc, 'db.col')
        self.assertEqual(got, expected)

        got = mappings._clean_and_flatten_doc(mapping, doc, 'db.missing_col')
        self.assertEqual(got, {})

        got = mappings._clean_and_flatten_doc(mapping, doc, 'missing_db.col')
        self.assertEqual(got, {})

    def get_mapped_document(self):
        mapping = {
            'db': {
                'col': {
                    'a': {'type': 'INT'},
                    'b.c.d': {'type': 'INT', 'dest': 'bcd'},
                    'e': {'type': '_ARRAY_OF_SCALARS'},
                    'e.0': {'type': 'INT', 'dest': 'e0'},
                    'e.1': {'type': 'INT', 'dest': 'e1'},
                    'e.2': {'type': 'INT', 'dest': 'e2'}
                }
            }
        }
        doc = {
            'a': 2,
            'b': {
                'c': {
                    'd': 5
                }
            },
            'e': [6, 7, 8]
        }
        expected = {
            'a': 2,
            'bcd': 5,
            'e0': 6,
            'e1': 7,
            'e2': 8
        }
        got = mappings.get_mapped_field(mapping, doc, 'db.col')
        self.assertEqual(got, expected)

    def test_get_mapped_field(self):
        mapping = {
            'db': {
                'col': {
                    'field': {
                        'dest': 'column'
                    }
                }
            }
        }
        got = mappings.get_mapped_field(mapping, 'db.col', 'field')
        self.assertEqual(got, 'column')

    def test_get_primary_key(self):
        mapping = {
            'db': {
                'col': {
                    'pk': '_id'
                }
            }
        }
        got = mappings.get_primary_key(mapping, 'db.col')
        self.assertEqual(got, '_id')

    def test_is_mapped(self):
        mapping = {
            'db': {
                'col': {
                    'field': {'type': 'TEXT'}
                }
            }
        }
        got = mappings.is_mapped(mapping, 'db.col', field_name=None)
        self.assertTrue(got)

        got = mappings.is_mapped(mapping, 'db.missing_col', field_name=None)
        self.assertFalse(got)

        got = mappings.is_mapped(mapping, 'missing_db.col', field_name=None)
        self.assertFalse(got)

        got = mappings.is_mapped(mapping, 'db.col', field_name='field')
        self.assertTrue(got)

        got = mappings.is_mapped(mapping, 'db.col', field_name='missing_field')
        self.assertFalse(got)

    def test_is_id_autogenerated(self):
        mapping = {
            'db': {
                'col': {
                    'pk': 'id'
                }
            }
        }
        got = mappings.is_id_autogenerated(mapping, 'db.col')
        self.assertTrue(got)

        mapping['db']['col']['_id'] = {'dest': 'id'}
        got = mappings.is_id_autogenerated(mapping, 'db.col')
        self.assertFalse(got)

    def test_scalar_array_fields(self):
        mapping = {
            'db': {
                'col1': {
                    'field': {
                        'type': '_ARRAY_OF_SCALARS'
                    }
                },
                'col2': {
                    'field': {'type': 'TEXT'}
                }
            }
        }
        got = mappings.get_scalar_array_fields(mapping, 'db', 'col1')
        self.assertEqual(got, ['field'])

        got = mappings.get_scalar_array_fields(mapping, 'db', 'col2')
        self.assertEqual(got, [])

        got = mappings.get_scalar_array_fields(mapping, 'db', 'missing_col')
        self.assertEqual(got, [])

        got = mappings.get_scalar_array_fields(mapping, 'missing_db', 'col')
        self.assertEqual(got, [])

    def test_invalid_mapping_missing_pk(self):
        mapping = {'testdb': {'testcol': {}}}

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_missing_pk_field(self):
        mapping = {'testdb': {'testcol': {'pk': '_id'}}}

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_valid_mapping_pk(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {
                        'type': 'INT'
                    }
                }
            }
        }

        mappings.validate_mapping(mapping)

    def test_valid_mapping_pk_auto_generated(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'dest': 'col_array',
                        'fk': 'id_testcol'
                    }
                },
                'col_array': {
                    'pk': 'id',
                    'id_testcol': {
                        'type': 'INT'
                    }
                }
            }
        }

        mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_missing_dest(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol'
                    }
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_dest_not_mapped(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_foreign_key_missing(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'}
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_foreign_key_type_mismatch(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'id_testcol': {'type': 'TEXT'}
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_valid_mapping_array(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'id_testcol': {'type': 'INT'}
                }
            }
        }

        mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_nested(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    'id_testcol': {'type': 'INT'},
                    'b': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol_a',
                        'dest': 'testcol_b'
                    }
                },
                'testcol_b': {
                    'pk': '_id',
                    'id_testcol_a': {'type': 'INT'},
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_valid_mapping_array_nested(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    'id_testcol': {'type': 'INT'},
                    'b': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol_a',
                        'dest': 'testcol_b'
                    }
                },
                'testcol_b': {
                    'pk': '_id',
                    'id_testcol_a': {'type': 'SERIAL'},
                }
            }
        }

        mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_of_scalar_missing_dest(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY_OF_SCALAR',
                        'fk': 'id_testcol',
                        'valueField': 'scalar'
                    }
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_of_scalar_dest_not_mapped(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY_OF_SCALAR',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a',
                        'valueField': 'scalar'
                    }
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_of_scalar_foreign_key_missing(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY_OF_SCALAR',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a',
                        'valueField': 'scalar'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'}
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_of_scalar_foreign_key_type_mismatch(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY_OF_SCALARS',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a',
                        'valueField': 'scalar'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'id_testcol': {'type': 'TEXT'}
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_invalid_mapping_array_of_scalar_value_field_not_mapped(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY_OF_SCALARS',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a',
                        'valueField': 'scalar'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'id_testcol': {'type': 'INT'}
                }
            }
        }

        with self.assertRaises(mappings.InvalidConfiguration):
            mappings.validate_mapping(mapping)

    def test_valid_mapping_array_of_scalar(self):
        mapping = {
            'testdb': {
                'testcol': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'a': {
                        'type': '_ARRAY',
                        'fk': 'id_testcol',
                        'dest': 'testcol_a'
                    }
                },
                'testcol_a': {
                    'pk': '_id',
                    '_id': {'type': 'INT'},
                    'id_testcol': {'type': 'INT'},
                    'scalar': {'type': 'INT'}
                }
            }
        }

        mappings.validate_mapping(mapping)


if __name__ == '__main__':
    main()
